---
// ModernWaterLoader.astro
---

<div class="water-loader-screen" id="waterLoader">
  <!-- Ambient Background -->
  <div class="ambient-bg">
    <div class="gradient-orb orb-1"></div>
    <div class="gradient-orb orb-2"></div>
  </div>

  <div class="loader-content">
    <!-- Brand Identity -->
    <div class="brand-identity">
      <div class="logo-symbol">
        <svg viewBox="0 0 100 100" class="water-icon">
          <defs>
            <linearGradient id="waterGrad" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" style="stop-color:#00d4ff;stop-opacity:1" />
              <stop offset="100%" style="stop-color:#0066cc;stop-opacity:1" />
            </linearGradient>
          </defs>
          <path d="M50 10 C30 30, 30 50, 50 70 C70 50, 70 30, 50 10 Z" fill="url(#waterGrad)" />
          <circle cx="50" cy="45" r="3" fill="rgba(255,255,255,0.8)" opacity="0">
            <animate attributeName="opacity" values="0;1;0" dur="2s" repeatCount="indefinite" />
          </circle>
        </svg>
      </div>
      <h1 class="brand-title">Pioneer Agencies</h1>
      <p class="brand-subtitle">Advanced Water Purification</p>
    </div>

    <!-- Main Purification Visualization -->
    <div class="purification-viz">
      <!-- Water Flow Container -->
      <div class="flow-container">
        <!-- Input Stream -->
        <div class="water-stream input-stream">
          <div class="stream-line">
            <div class="water-drops">
              <div class="drop contaminated"></div>
              <div class="drop contaminated"></div>
              <div class="drop contaminated"></div>
            </div>
          </div>
          <span class="stream-label">Contaminated</span>
        </div>

        <!-- Central Filter Core -->
        <div class="filter-core">
          <div class="core-outer">
            <div class="core-inner">
              <div class="filter-ring ring-1"></div>
              <div class="filter-ring ring-2"></div>
              <div class="filter-ring ring-3"></div>
              <div class="core-center">
                <div class="pulse-dot"></div>
              </div>
            </div>
          </div>
          <div class="processing-waves">
            <div class="wave"></div>
            <div class="wave"></div>
            <div class="wave"></div>
          </div>
        </div>

        <!-- Output Stream -->
        <div class="water-stream output-stream">
          <div class="stream-line">
            <div class="water-drops">
              <div class="drop purified"></div>
              <div class="drop purified"></div>
              <div class="drop purified"></div>
            </div>
          </div>
          <span class="stream-label">Purified</span>
        </div>
      </div>

      <!-- Performance Indicators -->
      <div class="performance-grid">
        <div class="perf-card">
          <div class="perf-value" data-target="99.9">0</div>
          <div class="perf-unit">% Pure</div>
        </div>
        <div class="perf-card">
          <div class="perf-value" data-target="24">0</div>
          <div class="perf-unit">L/min</div>
        </div>
        <div class="perf-card">
          <div class="perf-value" data-target="7.2">0</div>
          <div class="perf-unit">pH</div>
        </div>
      </div>
    </div>

    <!-- Minimal Progress Bar -->
    <div class="progress-area">
      <div class="progress-track">
        <div class="progress-glow"></div>
        <div class="progress-fill"></div>
      </div>
      <div class="status-row">
        <span class="status-message">Initializing system</span>
        <span class="status-percent">0%</span>
      </div>
    </div>
  </div>
</div>

<style>
  .water-loader-screen {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: linear-gradient(135deg, #0a0f1a 0%, #1a1a2e 40%, #16213e 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10000;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    overflow: hidden;
  }

  /* Ambient Background */
  .ambient-bg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
  }

  .gradient-orb {
    position: absolute;
    border-radius: 50%;
    opacity: 0.03;
    animation: orbFloat 20s ease-in-out infinite;
  }

  .orb-1 {
    width: 400px;
    height: 400px;
    background: radial-gradient(circle, #00d4ff 0%, transparent 70%);
    top: -200px;
    right: -200px;
    animation-delay: 0s;
  }

  .orb-2 {
    width: 300px;
    height: 300px;
    background: radial-gradient(circle, #0066cc 0%, transparent 70%);
    bottom: -150px;
    left: -150px;
    animation-delay: 10s;
  }

  @keyframes orbFloat {
    0%, 100% { transform: translate(0, 0) scale(1); }
    33% { transform: translate(30px, -20px) scale(1.1); }
    66% { transform: translate(-20px, 30px) scale(0.9); }
  }

  .loader-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 3rem;
    width: 100%;
    max-width: 500px;
    padding: 2rem;
    position: relative;
    z-index: 2;
  }

  /* Brand Identity */
  .brand-identity {
    text-align: center;
  }

  .logo-symbol {
    width: 80px;
    height: 80px;
    margin: 0 auto 1.5rem;
  }

  .water-icon {
    width: 100%;
    height: 100%;
    filter: drop-shadow(0 0 20px rgba(0, 212, 255, 0.3));
  }

  .brand-title {
    font-size: 2.4rem;
    font-weight: 600;
    color: #ffffff;
    margin-bottom: 0.5rem;
    letter-spacing: -0.03em;
  }

  .brand-subtitle {
    font-size: 1rem;
    color: #8892b0;
    font-weight: 400;
    letter-spacing: 0.05em;
  }

  /* Purification Visualization */
  .purification-viz {
    width: 100%;
  }

  .flow-container {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 2.5rem;
    position: relative;
  }

  .water-stream {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.8rem;
  }

  .stream-line {
    width: 120px;
    height: 8px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 4px;
    position: relative;
    overflow: hidden;
  }

  .water-drops {
    position: absolute;
    top: 50%;
    left: 0;
    width: 100%;
    height: 100%;
    transform: translateY(-50%);
  }

  .drop {
    position: absolute;
    width: 6px;
    height: 6px;
    border-radius: 50%;
    top: 50%;
    transform: translateY(-50%);
    animation: dropFlow 3s infinite linear;
  }

  .contaminated {
    background: #d4774e;
    box-shadow: 0 0 6px rgba(212, 119, 78, 0.6);
  }

  .purified {
    background: #00d4ff;
    box-shadow: 0 0 8px rgba(0, 212, 255, 0.8);
  }

  .input-stream .drop:nth-child(1) { animation-delay: 0s; }
  .input-stream .drop:nth-child(2) { animation-delay: 1s; }
  .input-stream .drop:nth-child(3) { animation-delay: 2s; }

  .output-stream .drop:nth-child(1) { animation-delay: 0.5s; }
  .output-stream .drop:nth-child(2) { animation-delay: 1.5s; }
  .output-stream .drop:nth-child(3) { animation-delay: 2.5s; }

  @keyframes dropFlow {
    0% {
      left: -6px;
      opacity: 0;
    }
    10% {
      opacity: 1;
    }
    90% {
      opacity: 1;
    }
    100% {
      left: 126px;
      opacity: 0;
    }
  }

  .stream-label {
    font-size: 0.75rem;
    color: #8892b0;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.1em;
  }

  /* Filter Core */
  .filter-core {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .core-outer {
    width: 100px;
    height: 100px;
    border: 2px solid rgba(0, 212, 255, 0.2);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .core-inner {
    width: 70px;
    height: 70px;
    background: radial-gradient(circle, rgba(0, 212, 255, 0.1) 0%, transparent 70%);
    border-radius: 50%;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .filter-ring {
    position: absolute;
    border-radius: 50%;
    border: 1px solid rgba(0, 212, 255, 0.3);
    animation: ringPulse 4s ease-in-out infinite;
  }

  .ring-1 {
    width: 40px;
    height: 40px;
    animation-delay: 0s;
  }

  .ring-2 {
    width: 55px;
    height: 55px;
    animation-delay: 1.3s;
  }

  .ring-3 {
    width: 70px;
    height: 70px;
    animation-delay: 2.6s;
  }

  @keyframes ringPulse {
    0%, 100% {
      transform: scale(1);
      opacity: 0.3;
    }
    50% {
      transform: scale(1.2);
      opacity: 0.6;
    }
  }

  .core-center {
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .pulse-dot {
    width: 8px;
    height: 8px;
    background: #00d4ff;
    border-radius: 50%;
    animation: dotPulse 2s ease-in-out infinite;
    box-shadow: 0 0 12px rgba(0, 212, 255, 0.8);
  }

  @keyframes dotPulse {
    0%, 100% {
      transform: scale(1);
      opacity: 1;
    }
    50% {
      transform: scale(1.5);
      opacity: 0.7;
    }
  }

  .processing-waves {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 120px;
    height: 120px;
    pointer-events: none;
  }

  .wave {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 20px;
    border: 2px solid rgba(0, 212, 255, 0.4);
    border-radius: 50%;
    transform: translate(-50%, -50%);
    animation: waveExpand 3s ease-out infinite;
  }

  .wave:nth-child(1) { animation-delay: 0s; }
  .wave:nth-child(2) { animation-delay: 1s; }
  .wave:nth-child(3) { animation-delay: 2s; }

  @keyframes waveExpand {
    0% {
      width: 20px;
      height: 20px;
      opacity: 1;
    }
    100% {
      width: 120px;
      height: 120px;
      opacity: 0;
    }
  }

  /* Performance Grid */
  .performance-grid {
    display: flex;
    justify-content: center;
    gap: 2rem;
  }

  .perf-card {
    text-align: center;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid rgba(255, 255, 255, 0.05);
    border-radius: 12px;
    backdrop-filter: blur(10px);
  }

  .perf-value {
    font-size: 1.8rem;
    font-weight: 700;
    color: #00d4ff;
    margin-bottom: 0.25rem;
    font-variant-numeric: tabular-nums;
  }

  .perf-unit {
    font-size: 0.7rem;
    color: #8892b0;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  /* Progress Area */
  .progress-area {
    width: 100%;
    max-width: 320px;
  }

  .progress-track {
    width: 100%;
    height: 4px;
    background: rgba(255, 255, 255, 0.08);
    border-radius: 2px;
    position: relative;
    overflow: hidden;
    margin-bottom: 1rem;
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #0066cc 0%, #00d4ff 100%);
    border-radius: 2px;
    width: 0%;
    transition: width 0.3s ease;
  }

  .progress-glow {
    position: absolute;
    top: -2px;
    left: 0;
    height: 8px;
    width: 30px;
    background: linear-gradient(90deg, transparent 0%, rgba(0, 212, 255, 0.6) 50%, transparent 100%);
    border-radius: 4px;
    opacity: 0;
    animation: progressGlow 2s ease-in-out infinite;
  }

  @keyframes progressGlow {
    0%, 100% {
      left: -30px;
      opacity: 0;
    }
    50% {
      opacity: 1;
    }
    100% {
      left: 100%;
      opacity: 0;
    }
  }

  .status-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .status-message {
    font-size: 0.9rem;
    color: #ccd6f6;
    font-weight: 400;
  }

  .status-percent {
    font-size: 0.9rem;
    color: #00d4ff;
    font-weight: 600;
    font-variant-numeric: tabular-nums;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .loader-content {
      gap: 2.5rem;
      padding: 1.5rem;
    }

    .brand-title {
      font-size: 2rem;
    }

    .brand-subtitle {
      font-size: 0.9rem;
    }

    .logo-symbol {
      width: 60px;
      height: 60px;
    }

    .flow-container {
      flex-direction: column;
      gap: 2rem;
      margin-bottom: 2rem;
    }

    .stream-line {
      width: 200px;
      transform: rotate(90deg);
    }

    .core-outer {
      width: 80px;
      height: 80px;
    }

    .core-inner {
      width: 55px;
      height: 55px;
    }

    .processing-waves {
      width: 100px;
      height: 100px;
    }

    .performance-grid {
      gap: 1.5rem;
    }

    .perf-value {
      font-size: 1.5rem;
    }

    /* Optimize animations for mobile */
    .wave {
      animation-duration: 4s;
    }

    .dropFlow {
      animation-duration: 4s;
    }
  }

  @media (max-width: 480px) {
    .loader-content {
      gap: 2rem;
      padding: 1rem;
    }

    .brand-title {
      font-size: 1.8rem;
    }

    .logo-symbol {
      width: 50px;
      height: 50px;
    }

    .stream-line {
      width: 150px;
    }

    .performance-grid {
      gap: 1rem;
    }

    .perf-card {
      padding: 0.8rem;
    }

    .perf-value {
      font-size: 1.3rem;
    }

    .perf-unit {
      font-size: 0.65rem;
    }
  }

  /* Performance optimizations */
  @media (prefers-reduced-motion: reduce) {
    * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
    }
  }
</style>

<script>
  class ModernWaterLoader {
    constructor() {
      this.progress = 0;
      this.targetProgress = 100;
      this.isActive = true;
      this.statusMessages = [
        "Initializing system",
        "Analyzing water quality",
        "Activating filters",
        "Optimizing flow rate",
        "System ready"
      ];
      this.currentStatus = 0;
      
      this.start();
    }

    start() {
      requestAnimationFrame(() => {
        this.animateProgress();
        this.animateMetrics();
        this.rotateStatus();
        this.scheduleCompletion();
      });
    }

    animateProgress() {
      const progressFill = document.querySelector('.progress-fill');
      const progressPercent = document.querySelector('.status-percent');
      const progressGlow = document.querySelector('.progress-glow');
      
      if (!progressFill || !progressPercent) return;

      const updateProgress = () => {
        if (this.progress < this.targetProgress && this.isActive) {
          this.progress += Math.random() * 2 + 1;
          this.progress = Math.min(this.progress, this.targetProgress);
          
          progressFill.style.width = `${this.progress}%`;
          progressPercent.textContent = `${Math.floor(this.progress)}%`;
          
          if (this.progress > 15 && progressGlow) {
            progressGlow.style.animationPlayState = 'running';
          }
          
          requestAnimationFrame(updateProgress);
        }
      };
      
      setTimeout(() => requestAnimationFrame(updateProgress), 200);
    }

    animateMetrics() {
      const perfValues = document.querySelectorAll('.perf-value');
      
      perfValues.forEach((value, index) => {
        const target = parseFloat(value.dataset.target);
        let current = 0;
        
        const updateValue = () => {
          if (current < target && this.isActive) {
            const increment = target / 45;
            current += increment;
            current = Math.min(current, target);
            
            if (index === 0 || index === 2) {
              value.textContent = current.toFixed(1);
            } else {
              value.textContent = Math.floor(current);
            }
            
            requestAnimationFrame(updateValue);
          }
        };
        
        setTimeout(() => requestAnimationFrame(updateValue), 600 + index * 300);
      });
    }

    rotateStatus() {
      const statusMessage = document.querySelector('.status-message');
      if (!statusMessage) return;

      const changeStatus = () => {
        if (this.isActive && this.currentStatus < this.statusMessages.length - 1) {
          statusMessage.style.opacity = '0';
          
          setTimeout(() => {
            this.currentStatus++;
            statusMessage.textContent = this.statusMessages[this.currentStatus];
            statusMessage.style.opacity = '1';
          }, 150);
          
          setTimeout(changeStatus, 1200);
        }
      };
      
      setTimeout(changeStatus, 1000);
    }

    scheduleCompletion() {
      setTimeout(() => {
        this.complete();
      }, 5000);
    }

    complete() {
      this.isActive = false;
      const loader = document.getElementById('waterLoader');
      
      if (loader) {
        loader.style.opacity = '0';
        loader.style.transition = 'opacity 0.5s ease-out';
        
        setTimeout(() => {
          loader.style.display = 'none';
          loader.remove();
        }, 500);
      }
    }
  }

  // Initialize loader
  function initModernLoader() {
    try {
      const loader = new ModernWaterLoader();
      window.hideWaterLoader = () => loader.complete();
    } catch (error) {
      console.warn('Water loader initialization failed:', error);
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initModernLoader);
  } else {
    initModernLoader();
  }
</script>